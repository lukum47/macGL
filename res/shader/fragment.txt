#version 460
out vec4 frag_color;
in vec2 texCoords;
in vec3 norm;
in vec3 fragPos;

uniform vec3 viewPos;

struct Material
{
 sampler2D diffuse;
 sampler2D specular;
 sampler2D normal;
};
uniform Material materials;

struct validMaterial {
bool diffuse;
bool specular;
};

uniform validMaterial validMat;

uniform vec3 lightColor;
uniform vec3 objectColor;
struct PointLight {
vec3 position;

float constant;
float linear;
float quadratic;

vec3 ambient;
vec3 diffuse;
vec3 specular;
};

uniform PointLight pointLight;

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
void main() 
{
	vec3 normal = texture(materials.normal, texCoords).rgb;
	normal = normalize(normal * 2.0 - 1.0);
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 result = CalcPointLight(pointLight, normal, fragPos, viewDir);

	frag_color = vec4(result, 1.0);

}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir) {

//затухание
float distance = length(pointLight.position - fragPos);
float autenuation = 1.0/ (pointLight.constant + pointLight.linear * distance + 
  			     pointLight.quadratic * (distance * distance));
 
vec3 lightDir = normalize(light.position - fragPos);

	
 

// if(validMat.diffuse) {
//расчет диффузного освещения 
float diff = max(dot(normal, lightDir), 0.0);
vec3 ambient = light.ambient *  vec3(texture(materials.diffuse, texCoords));
vec3 diffuse = light.diffuse * diff * vec3(texture(materials.diffuse, texCoords));
ambient *= autenuation;
diffuse *= autenuation;
//}
//else {
//vec3 ambient = vec3(1.0);
//vec3 diffuse = vec3(1.0);
//}

//if(validMat.specular) {
// рассчет бликового освещения 
//vec3 reflectionDir = reflect(-lightDir, normal); // направление отражения света 
//float spec = pow(max(dot(viewDir, reflectionDir), 0.0), 32.0);
//vec3 specular = light.specular * spec  * vec3(texture(materials.specular, texCoords));
//specular *= autenuation;
//}
//else vec3 specular = vec3(1.0);



return(ambient + diffuse); //+ specular);

}